/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_print_combo.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: sharris <sharris@student.42.us.org>       +#+  +:+       +#+         */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/05/17 16:32:21 by sharris           #+#    #+#             */
/*   Updated: 2018/05/17 23:39:55 by sharris          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

int		ft_putchar(char c);
void	ft_putnbr(int nb);
void	ft_print_combn(int n);
void	pairComb(int digit, int min, int leftSide);
int		

void	ft_putnbr(int nb)
{
	if (nb == -2147483648)
	{
		ft_putnbr(-214748364);
		ft_putnbr(8);
	}
	else
	{
		if (nb < 0)
			ft_putchar('-');
		if (nb < 0)
			nb = nb * -1;
		if (nb <= 9)
			ft_putchar(nb + '0');
		else
		{
			ft_putnbr(nb / 10);
			ft_putnbr(nb % 10);
		}
	}
}

void	ft_print_combn(int n)
{
	int minRight; // minimum far-right digit value
	int maxLeft;
	int i;
	int j; // <-- probably tens
	int leftSide;

	minRight = n - 1; // ie: n = 3, would mean 012 is first value, thus min value is 3 - 1 = 2
	maxLeft = 10 - n; // ie n = 3, would mean 789 is last value, thus max value for left is 10 - 3 = 7
	while (i <= maxLeft)
	{
		pairComb(n, minRight, j); // min - 9 for single digit hits here. Next step: Increment digit on the left (j)
		
		i++;
		
		minRight++;
	}
}

void pairComb(int digit, int min, int leftSide)
{
	int i;
	int includeZero;

	includeZero	= 0;

	if (digit > 1 && leftSide / 10 == 0)
		//includeZero = 1;
	i = min;
	while (min < 10)
	{
		if(includeZero)
			ft_putnbr(0);
		ft_putnbr(leftSide);
		ft_putnbr(min);
		ft_putchar(',');
		ft_putchar(' ');
		min++;
	}
}

int incrementDigit(int digit, int value)
{
	int i; // selects digit to increment
	int j;

	i = 1;
	while (j < (digit - 1))
	{
		i *= 10;
		j++;
	}
	return value + i; 
}

int resetDigitToZero(int digit, int value)
{
	//example, 089, reset 1's to zero using variables
	int i;
	int p;
	int d1;
	int d2;

	i = 1;
	p = 1;

	while (i < digit) // stays at 1's
	{
		p *= 10;
		i++;
	}
	d1 = value / p; // 89
	d1 = d1 % 10; // 89 % 10 = 9
	d2 = value / (p * 10); // 89 / 10 = 8
	d2 = d2 % 10; // 8

	if (d1 == d2 + 1) // if 9 == 8 + 1? 
		resetDigitToZero(digit + 1, value); // 2, 89
	d1 = d2 + 1; // 8 = 0 + 1 = 1 < d1 new numb
	value = value - (d1 * p) + ((d2+1) * p); // v = 89 - (1*10)
	//ft_putchar('>');
	ft_putnbr(d1 + '0');
	//ft_putnbr(d2 + '0');
	return 0;
}

